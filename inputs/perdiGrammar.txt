============================================================
GOLD Parser Builder
Version 5.2.0.
============================================================


========================================
Terminals
========================================

 0      (EOF)
 1      (Error)
 2      Whitespace
 3      '-'
 4      '$'
 5      '('
 6      ')'
 7      '*'
 8      '/'
 9      ';'
 10     '{'
 11     '}'
 12     '+'
 13     '<'
 14     '='
 15     '>'
 16     BREAK
 17     ELSE
 18     FALSE
 19     float
 20     FOR
 21     IF
 22     IN
 23     int
 24     TRUE
 25     var
 26     WHILE


========================================
Nonterminals
========================================

27      <attr>
28      <break>
29      <cond>
30      <cond2>
31      <condS>
32      <E>
33      <EL>
34      <escopo>
35      <F>
36      <laco>
37      <logcond>
38      <num>
39      <op>
40      <perdi>
41      <S>
42      <V>


========================================
Rules
========================================

0       <escopo> ::= <escopo> <op>
1       <escopo> ::= 
2       <num> ::= int
3       <num> ::= float
4       <op> ::= <attr>
5       <op> ::= <cond>
6       <op> ::= <laco>
7       <E> ::= <E> '+' <F>
8       <E> ::= <E> '-' <F>
9       <E> ::= <E> '*' <F>
10      <E> ::= <E> '/' <F>
11      <E> ::= <F>
12      <F> ::= '(' <E> ')'
13      <F> ::= <V>
14      <V> ::= var
15      <V> ::= <num>
16      <attr> ::= var '=' <E> ';'
17      <condS> ::= '<'
18      <condS> ::= '>'
19      <logcond> ::= <V> <condS> <V>
20      <logcond> ::= TRUE
21      <logcond> ::= FALSE
22      <cond> ::= IF <logcond> '{' <escopo> '}' <cond2>
23      <cond2> ::= ELSE '{' <escopo> '}'
24      <cond2> ::= 
25      <EL> ::= '{' <escopo> <break> '}'
26      <laco> ::= WHILE <logcond> <EL>
27      <laco> ::= FOR var IN var <EL>
28      <break> ::= BREAK ';'
29      <S> ::= <escopo>
30      <perdi> ::= <S> '$'


========================================
LALR States
========================================

State 0
        <S'> ::= _ <perdi> (EOF)                                  <S'> ::= ^ <perdi> (EOF)
        <escopo> ::= _ <escopo> <op>                              <escopo> ::= ^ <escopo> <op>
        <escopo> ::= _                                            <escopo> ::= ^
        <S> ::= _ <escopo>                                        <S> ::= ^ <escopo>
        <perdi> ::= _ <S> '$'                                     <perdi> ::= ^ <S> '$'

        <escopo> g 1
        <perdi> g 2
        <S> g 3
        '$' r 1
        FOR r 1
        IF r 1
        var r 1
        WHILE r 1


State 1
        Prior States: 0

        <escopo> ::= <escopo> _ <op>                              <escopo> ::= <escopo> ^ <op>
        <S> ::= <escopo> _                                        <S> ::= <escopo> ^
        <op> ::= _ <attr>                                         <op> ::= ^ <attr>
        <op> ::= _ <cond>                                         <op> ::= ^ <cond>
        <op> ::= _ <laco>                                         <op> ::= ^ <laco>
        <attr> ::= _ var '=' <E> ';'                              <attr> ::= ^ var '=' <E> ';'
        <cond> ::= _ IF <logcond> '{' <escopo> '}' <cond2>        <cond> ::= ^ IF <logcond> '{' <escopo> '}' <cond2>
        <laco> ::= _ WHILE <logcond> <EL>                         <laco> ::= ^ WHILE <logcond> <EL>
        <laco> ::= _ FOR var IN var <EL>                          <laco> ::= ^ FOR var IN var <EL>

        FOR s 4
        IF s 5
        var s 6
        WHILE s 7
        <attr> g 8
        <cond> g 9
        <laco> g 10
        <op> g 11
        '$' r 29


State 2
        Prior States: 0

        <S'> ::= <perdi> _ (EOF)                                  <S'> ::= <perdi> ^ (EOF)

        (EOF) a


State 3
        Prior States: 0

        <perdi> ::= <S> _ '$'                                     <perdi> ::= <S> ^ '$'

        '$' s 12


State 4
        Prior States: 1, 36, 44, 59

        <laco> ::= FOR _ var IN var <EL>                          <laco> ::= FOR ^ var IN var <EL>

        var s 13


State 5
        Prior States: 1, 36, 44, 59

        <cond> ::= IF _ <logcond> '{' <escopo> '}' <cond2>        <cond> ::= IF ^ <logcond> '{' <escopo> '}' <cond2>
        <num> ::= _ int                                           <num> ::= ^ int
        <num> ::= _ float                                         <num> ::= ^ float
        <V> ::= _ var                                             <V> ::= ^ var
        <V> ::= _ <num>                                           <V> ::= ^ <num>
        <logcond> ::= _ <V> <condS> <V>                           <logcond> ::= ^ <V> <condS> <V>
        <logcond> ::= _ TRUE                                      <logcond> ::= ^ TRUE
        <logcond> ::= _ FALSE                                     <logcond> ::= ^ FALSE

        FALSE s 14
        float s 15
        int s 16
        TRUE s 17
        var s 18
        <logcond> g 19
        <num> g 20
        <V> g 21


State 6
        Prior States: 1, 36, 44, 59

        <attr> ::= var _ '=' <E> ';'                              <attr> ::= var ^ '=' <E> ';'

        '=' s 22


State 7
        Prior States: 1, 36, 44, 59

        <laco> ::= WHILE _ <logcond> <EL>                         <laco> ::= WHILE ^ <logcond> <EL>
        <num> ::= _ int                                           <num> ::= ^ int
        <num> ::= _ float                                         <num> ::= ^ float
        <V> ::= _ var                                             <V> ::= ^ var
        <V> ::= _ <num>                                           <V> ::= ^ <num>
        <logcond> ::= _ <V> <condS> <V>                           <logcond> ::= ^ <V> <condS> <V>
        <logcond> ::= _ TRUE                                      <logcond> ::= ^ TRUE
        <logcond> ::= _ FALSE                                     <logcond> ::= ^ FALSE

        FALSE s 14
        float s 15
        int s 16
        TRUE s 17
        var s 18
        <logcond> g 23
        <num> g 20
        <V> g 21


State 8
        Prior States: 1, 36, 44, 59

        <op> ::= <attr> _                                         <op> ::= <attr> ^

        '$' r 4
        '}' r 4
        BREAK r 4
        FOR r 4
        IF r 4
        var r 4
        WHILE r 4


State 9
        Prior States: 1, 36, 44, 59

        <op> ::= <cond> _                                         <op> ::= <cond> ^

        '$' r 5
        '}' r 5
        BREAK r 5
        FOR r 5
        IF r 5
        var r 5
        WHILE r 5


State 10
        Prior States: 1, 36, 44, 59

        <op> ::= <laco> _                                         <op> ::= <laco> ^

        '$' r 6
        '}' r 6
        BREAK r 6
        FOR r 6
        IF r 6
        var r 6
        WHILE r 6


State 11
        Prior States: 1, 36, 44, 59

        <escopo> ::= <escopo> <op> _                              <escopo> ::= <escopo> <op> ^

        '$' r 0
        '}' r 0
        BREAK r 0
        FOR r 0
        IF r 0
        var r 0
        WHILE r 0


State 12
        Prior States: 3

        <perdi> ::= <S> '$' _                                     <perdi> ::= <S> '$' ^

        (EOF) r 30


State 13
        Prior States: 4

        <laco> ::= FOR var _ IN var <EL>                          <laco> ::= FOR var ^ IN var <EL>

        IN s 24


State 14
        Prior States: 5, 7

        <logcond> ::= FALSE _                                     <logcond> ::= FALSE ^

        '{' r 21


State 15
        Prior States: 5, 7, 22, 28, 29, 39, 40, 41, 43

        <num> ::= float _                                         <num> ::= float ^

        '-' r 3
        ')' r 3
        '*' r 3
        '/' r 3
        ';' r 3
        '{' r 3
        '+' r 3
        '<' r 3
        '>' r 3


State 16
        Prior States: 5, 7, 22, 28, 29, 39, 40, 41, 43

        <num> ::= int _                                           <num> ::= int ^

        '-' r 2
        ')' r 2
        '*' r 2
        '/' r 2
        ';' r 2
        '{' r 2
        '+' r 2
        '<' r 2
        '>' r 2


State 17
        Prior States: 5, 7

        <logcond> ::= TRUE _                                      <logcond> ::= TRUE ^

        '{' r 20


State 18
        Prior States: 5, 7, 22, 28, 29, 39, 40, 41, 43

        <V> ::= var _                                             <V> ::= var ^

        '-' r 14
        ')' r 14
        '*' r 14
        '/' r 14
        ';' r 14
        '{' r 14
        '+' r 14
        '<' r 14
        '>' r 14


State 19
        Prior States: 5

        <cond> ::= IF <logcond> _ '{' <escopo> '}' <cond2>        <cond> ::= IF <logcond> ^ '{' <escopo> '}' <cond2>

        '{' s 25


State 20
        Prior States: 5, 7, 22, 28, 29, 39, 40, 41, 43

        <V> ::= <num> _                                           <V> ::= <num> ^

        '-' r 15
        ')' r 15
        '*' r 15
        '/' r 15
        ';' r 15
        '{' r 15
        '+' r 15
        '<' r 15
        '>' r 15


State 21
        Prior States: 5, 7

        <logcond> ::= <V> _ <condS> <V>                           <logcond> ::= <V> ^ <condS> <V>
        <condS> ::= _ '<'                                         <condS> ::= ^ '<'
        <condS> ::= _ '>'                                         <condS> ::= ^ '>'

        '<' s 26
        '>' s 27
        <condS> g 28


State 22
        Prior States: 6

        <attr> ::= var '=' _ <E> ';'                              <attr> ::= var '=' ^ <E> ';'
        <num> ::= _ int                                           <num> ::= ^ int
        <num> ::= _ float                                         <num> ::= ^ float
        <E> ::= _ <E> '+' <F>                                     <E> ::= ^ <E> '+' <F>
        <E> ::= _ <E> '-' <F>                                     <E> ::= ^ <E> '-' <F>
        <E> ::= _ <E> '*' <F>                                     <E> ::= ^ <E> '*' <F>
        <E> ::= _ <E> '/' <F>                                     <E> ::= ^ <E> '/' <F>
        <E> ::= _ <F>                                             <E> ::= ^ <F>
        <F> ::= _ '(' <E> ')'                                     <F> ::= ^ '(' <E> ')'
        <F> ::= _ <V>                                             <F> ::= ^ <V>
        <V> ::= _ var                                             <V> ::= ^ var
        <V> ::= _ <num>                                           <V> ::= ^ <num>

        '(' s 29
        float s 15
        int s 16
        var s 18
        <E> g 30
        <F> g 31
        <num> g 20
        <V> g 32


State 23
        Prior States: 7

        <laco> ::= WHILE <logcond> _ <EL>                         <laco> ::= WHILE <logcond> ^ <EL>
        <EL> ::= _ '{' <escopo> <break> '}'                       <EL> ::= ^ '{' <escopo> <break> '}'

        '{' s 33
        <EL> g 34


State 24
        Prior States: 13

        <laco> ::= FOR var IN _ var <EL>                          <laco> ::= FOR var IN ^ var <EL>

        var s 35


State 25
        Prior States: 19

        <cond> ::= IF <logcond> '{' _ <escopo> '}' <cond2>        <cond> ::= IF <logcond> '{' ^ <escopo> '}' <cond2>
        <escopo> ::= _ <escopo> <op>                              <escopo> ::= ^ <escopo> <op>
        <escopo> ::= _                                            <escopo> ::= ^

        <escopo> g 36
        '}' r 1
        FOR r 1
        IF r 1
        var r 1
        WHILE r 1


State 26
        Prior States: 21

        <condS> ::= '<' _                                         <condS> ::= '<' ^

        float r 17
        int r 17
        var r 17


State 27
        Prior States: 21

        <condS> ::= '>' _                                         <condS> ::= '>' ^

        float r 18
        int r 18
        var r 18


State 28
        Prior States: 21

        <logcond> ::= <V> <condS> _ <V>                           <logcond> ::= <V> <condS> ^ <V>
        <num> ::= _ int                                           <num> ::= ^ int
        <num> ::= _ float                                         <num> ::= ^ float
        <V> ::= _ var                                             <V> ::= ^ var
        <V> ::= _ <num>                                           <V> ::= ^ <num>

        float s 15
        int s 16
        var s 18
        <num> g 20
        <V> g 37


State 29
        Prior States: 22, 29, 39, 40, 41, 43

        <F> ::= '(' _ <E> ')'                                     <F> ::= '(' ^ <E> ')'
        <num> ::= _ int                                           <num> ::= ^ int
        <num> ::= _ float                                         <num> ::= ^ float
        <E> ::= _ <E> '+' <F>                                     <E> ::= ^ <E> '+' <F>
        <E> ::= _ <E> '-' <F>                                     <E> ::= ^ <E> '-' <F>
        <E> ::= _ <E> '*' <F>                                     <E> ::= ^ <E> '*' <F>
        <E> ::= _ <E> '/' <F>                                     <E> ::= ^ <E> '/' <F>
        <E> ::= _ <F>                                             <E> ::= ^ <F>
        <F> ::= _ '(' <E> ')'                                     <F> ::= ^ '(' <E> ')'
        <F> ::= _ <V>                                             <F> ::= ^ <V>
        <V> ::= _ var                                             <V> ::= ^ var
        <V> ::= _ <num>                                           <V> ::= ^ <num>

        '(' s 29
        float s 15
        int s 16
        var s 18
        <E> g 38
        <F> g 31
        <num> g 20
        <V> g 32


State 30
        Prior States: 22

        <attr> ::= var '=' <E> _ ';'                              <attr> ::= var '=' <E> ^ ';'
        <E> ::= <E> _ '+' <F>                                     <E> ::= <E> ^ '+' <F>
        <E> ::= <E> _ '-' <F>                                     <E> ::= <E> ^ '-' <F>
        <E> ::= <E> _ '*' <F>                                     <E> ::= <E> ^ '*' <F>
        <E> ::= <E> _ '/' <F>                                     <E> ::= <E> ^ '/' <F>

        '-' s 39
        '*' s 40
        '/' s 41
        ';' s 42
        '+' s 43


State 31
        Prior States: 22, 29

        <E> ::= <F> _                                             <E> ::= <F> ^

        '-' r 11
        ')' r 11
        '*' r 11
        '/' r 11
        ';' r 11
        '+' r 11


State 32
        Prior States: 22, 29, 39, 40, 41, 43

        <F> ::= <V> _                                             <F> ::= <V> ^

        '-' r 13
        ')' r 13
        '*' r 13
        '/' r 13
        ';' r 13
        '+' r 13


State 33
        Prior States: 23, 35

        <EL> ::= '{' _ <escopo> <break> '}'                       <EL> ::= '{' ^ <escopo> <break> '}'
        <escopo> ::= _ <escopo> <op>                              <escopo> ::= ^ <escopo> <op>
        <escopo> ::= _                                            <escopo> ::= ^

        <escopo> g 44
        BREAK r 1
        FOR r 1
        IF r 1
        var r 1
        WHILE r 1


State 34
        Prior States: 23

        <laco> ::= WHILE <logcond> <EL> _                         <laco> ::= WHILE <logcond> <EL> ^

        '$' r 26
        '}' r 26
        BREAK r 26
        FOR r 26
        IF r 26
        var r 26
        WHILE r 26


State 35
        Prior States: 24

        <laco> ::= FOR var IN var _ <EL>                          <laco> ::= FOR var IN var ^ <EL>
        <EL> ::= _ '{' <escopo> <break> '}'                       <EL> ::= ^ '{' <escopo> <break> '}'

        '{' s 33
        <EL> g 45


State 36
        Prior States: 25

        <cond> ::= IF <logcond> '{' <escopo> _ '}' <cond2>        <cond> ::= IF <logcond> '{' <escopo> ^ '}' <cond2>
        <escopo> ::= <escopo> _ <op>                              <escopo> ::= <escopo> ^ <op>
        <op> ::= _ <attr>                                         <op> ::= ^ <attr>
        <op> ::= _ <cond>                                         <op> ::= ^ <cond>
        <op> ::= _ <laco>                                         <op> ::= ^ <laco>
        <attr> ::= _ var '=' <E> ';'                              <attr> ::= ^ var '=' <E> ';'
        <cond> ::= _ IF <logcond> '{' <escopo> '}' <cond2>        <cond> ::= ^ IF <logcond> '{' <escopo> '}' <cond2>
        <laco> ::= _ WHILE <logcond> <EL>                         <laco> ::= ^ WHILE <logcond> <EL>
        <laco> ::= _ FOR var IN var <EL>                          <laco> ::= ^ FOR var IN var <EL>

        '}' s 46
        FOR s 4
        IF s 5
        var s 6
        WHILE s 7
        <attr> g 8
        <cond> g 9
        <laco> g 10
        <op> g 11


State 37
        Prior States: 28

        <logcond> ::= <V> <condS> <V> _                           <logcond> ::= <V> <condS> <V> ^

        '{' r 19


State 38
        Prior States: 29

        <F> ::= '(' <E> _ ')'                                     <F> ::= '(' <E> ^ ')'
        <E> ::= <E> _ '+' <F>                                     <E> ::= <E> ^ '+' <F>
        <E> ::= <E> _ '-' <F>                                     <E> ::= <E> ^ '-' <F>
        <E> ::= <E> _ '*' <F>                                     <E> ::= <E> ^ '*' <F>
        <E> ::= <E> _ '/' <F>                                     <E> ::= <E> ^ '/' <F>

        '-' s 39
        ')' s 47
        '*' s 40
        '/' s 41
        '+' s 43


State 39
        Prior States: 30, 38

        <E> ::= <E> '-' _ <F>                                     <E> ::= <E> '-' ^ <F>
        <num> ::= _ int                                           <num> ::= ^ int
        <num> ::= _ float                                         <num> ::= ^ float
        <F> ::= _ '(' <E> ')'                                     <F> ::= ^ '(' <E> ')'
        <F> ::= _ <V>                                             <F> ::= ^ <V>
        <V> ::= _ var                                             <V> ::= ^ var
        <V> ::= _ <num>                                           <V> ::= ^ <num>

        '(' s 29
        float s 15
        int s 16
        var s 18
        <F> g 48
        <num> g 20
        <V> g 32


State 40
        Prior States: 30, 38

        <E> ::= <E> '*' _ <F>                                     <E> ::= <E> '*' ^ <F>
        <num> ::= _ int                                           <num> ::= ^ int
        <num> ::= _ float                                         <num> ::= ^ float
        <F> ::= _ '(' <E> ')'                                     <F> ::= ^ '(' <E> ')'
        <F> ::= _ <V>                                             <F> ::= ^ <V>
        <V> ::= _ var                                             <V> ::= ^ var
        <V> ::= _ <num>                                           <V> ::= ^ <num>

        '(' s 29
        float s 15
        int s 16
        var s 18
        <F> g 49
        <num> g 20
        <V> g 32


State 41
        Prior States: 30, 38

        <E> ::= <E> '/' _ <F>                                     <E> ::= <E> '/' ^ <F>
        <num> ::= _ int                                           <num> ::= ^ int
        <num> ::= _ float                                         <num> ::= ^ float
        <F> ::= _ '(' <E> ')'                                     <F> ::= ^ '(' <E> ')'
        <F> ::= _ <V>                                             <F> ::= ^ <V>
        <V> ::= _ var                                             <V> ::= ^ var
        <V> ::= _ <num>                                           <V> ::= ^ <num>

        '(' s 29
        float s 15
        int s 16
        var s 18
        <F> g 50
        <num> g 20
        <V> g 32


State 42
        Prior States: 30

        <attr> ::= var '=' <E> ';' _                              <attr> ::= var '=' <E> ';' ^

        '$' r 16
        '}' r 16
        BREAK r 16
        FOR r 16
        IF r 16
        var r 16
        WHILE r 16


State 43
        Prior States: 30, 38

        <E> ::= <E> '+' _ <F>                                     <E> ::= <E> '+' ^ <F>
        <num> ::= _ int                                           <num> ::= ^ int
        <num> ::= _ float                                         <num> ::= ^ float
        <F> ::= _ '(' <E> ')'                                     <F> ::= ^ '(' <E> ')'
        <F> ::= _ <V>                                             <F> ::= ^ <V>
        <V> ::= _ var                                             <V> ::= ^ var
        <V> ::= _ <num>                                           <V> ::= ^ <num>

        '(' s 29
        float s 15
        int s 16
        var s 18
        <F> g 51
        <num> g 20
        <V> g 32


State 44
        Prior States: 33

        <EL> ::= '{' <escopo> _ <break> '}'                       <EL> ::= '{' <escopo> ^ <break> '}'
        <escopo> ::= <escopo> _ <op>                              <escopo> ::= <escopo> ^ <op>
        <op> ::= _ <attr>                                         <op> ::= ^ <attr>
        <op> ::= _ <cond>                                         <op> ::= ^ <cond>
        <op> ::= _ <laco>                                         <op> ::= ^ <laco>
        <attr> ::= _ var '=' <E> ';'                              <attr> ::= ^ var '=' <E> ';'
        <cond> ::= _ IF <logcond> '{' <escopo> '}' <cond2>        <cond> ::= ^ IF <logcond> '{' <escopo> '}' <cond2>
        <laco> ::= _ WHILE <logcond> <EL>                         <laco> ::= ^ WHILE <logcond> <EL>
        <laco> ::= _ FOR var IN var <EL>                          <laco> ::= ^ FOR var IN var <EL>
        <break> ::= _ BREAK ';'                                   <break> ::= ^ BREAK ';'

        BREAK s 52
        FOR s 4
        IF s 5
        var s 6
        WHILE s 7
        <attr> g 8
        <break> g 53
        <cond> g 9
        <laco> g 10
        <op> g 11


State 45
        Prior States: 35

        <laco> ::= FOR var IN var <EL> _                          <laco> ::= FOR var IN var <EL> ^

        '$' r 27
        '}' r 27
        BREAK r 27
        FOR r 27
        IF r 27
        var r 27
        WHILE r 27


State 46
        Prior States: 36

        <cond> ::= IF <logcond> '{' <escopo> '}' _ <cond2>        <cond> ::= IF <logcond> '{' <escopo> '}' ^ <cond2>
        <cond2> ::= _ ELSE '{' <escopo> '}'                       <cond2> ::= ^ ELSE '{' <escopo> '}'
        <cond2> ::= _                                             <cond2> ::= ^

        ELSE s 54
        <cond2> g 55
        '$' r 24
        '}' r 24
        BREAK r 24
        FOR r 24
        IF r 24
        var r 24
        WHILE r 24


State 47
        Prior States: 38

        <F> ::= '(' <E> ')' _                                     <F> ::= '(' <E> ')' ^

        '-' r 12
        ')' r 12
        '*' r 12
        '/' r 12
        ';' r 12
        '+' r 12


State 48
        Prior States: 39

        <E> ::= <E> '-' <F> _                                     <E> ::= <E> '-' <F> ^

        '-' r 8
        ')' r 8
        '*' r 8
        '/' r 8
        ';' r 8
        '+' r 8


State 49
        Prior States: 40

        <E> ::= <E> '*' <F> _                                     <E> ::= <E> '*' <F> ^

        '-' r 9
        ')' r 9
        '*' r 9
        '/' r 9
        ';' r 9
        '+' r 9


State 50
        Prior States: 41

        <E> ::= <E> '/' <F> _                                     <E> ::= <E> '/' <F> ^

        '-' r 10
        ')' r 10
        '*' r 10
        '/' r 10
        ';' r 10
        '+' r 10


State 51
        Prior States: 43

        <E> ::= <E> '+' <F> _                                     <E> ::= <E> '+' <F> ^

        '-' r 7
        ')' r 7
        '*' r 7
        '/' r 7
        ';' r 7
        '+' r 7


State 52
        Prior States: 44

        <break> ::= BREAK _ ';'                                   <break> ::= BREAK ^ ';'

        ';' s 56


State 53
        Prior States: 44

        <EL> ::= '{' <escopo> <break> _ '}'                       <EL> ::= '{' <escopo> <break> ^ '}'

        '}' s 57


State 54
        Prior States: 46

        <cond2> ::= ELSE _ '{' <escopo> '}'                       <cond2> ::= ELSE ^ '{' <escopo> '}'

        '{' s 58


State 55
        Prior States: 46

        <cond> ::= IF <logcond> '{' <escopo> '}' <cond2> _        <cond> ::= IF <logcond> '{' <escopo> '}' <cond2> ^

        '$' r 22
        '}' r 22
        BREAK r 22
        FOR r 22
        IF r 22
        var r 22
        WHILE r 22


State 56
        Prior States: 52

        <break> ::= BREAK ';' _                                   <break> ::= BREAK ';' ^

        '}' r 28


State 57
        Prior States: 53

        <EL> ::= '{' <escopo> <break> '}' _                       <EL> ::= '{' <escopo> <break> '}' ^

        '$' r 25
        '}' r 25
        BREAK r 25
        FOR r 25
        IF r 25
        var r 25
        WHILE r 25


State 58
        Prior States: 54

        <cond2> ::= ELSE '{' _ <escopo> '}'                       <cond2> ::= ELSE '{' ^ <escopo> '}'
        <escopo> ::= _ <escopo> <op>                              <escopo> ::= ^ <escopo> <op>
        <escopo> ::= _                                            <escopo> ::= ^

        <escopo> g 59
        '}' r 1
        FOR r 1
        IF r 1
        var r 1
        WHILE r 1


State 59
        Prior States: 58

        <cond2> ::= ELSE '{' <escopo> _ '}'                       <cond2> ::= ELSE '{' <escopo> ^ '}'
        <escopo> ::= <escopo> _ <op>                              <escopo> ::= <escopo> ^ <op>
        <op> ::= _ <attr>                                         <op> ::= ^ <attr>
        <op> ::= _ <cond>                                         <op> ::= ^ <cond>
        <op> ::= _ <laco>                                         <op> ::= ^ <laco>
        <attr> ::= _ var '=' <E> ';'                              <attr> ::= ^ var '=' <E> ';'
        <cond> ::= _ IF <logcond> '{' <escopo> '}' <cond2>        <cond> ::= ^ IF <logcond> '{' <escopo> '}' <cond2>
        <laco> ::= _ WHILE <logcond> <EL>                         <laco> ::= ^ WHILE <logcond> <EL>
        <laco> ::= _ FOR var IN var <EL>                          <laco> ::= ^ FOR var IN var <EL>

        '}' s 60
        FOR s 4
        IF s 5
        var s 6
        WHILE s 7
        <attr> g 8
        <cond> g 9
        <laco> g 10
        <op> g 11


State 60
        Prior States: 59

        <cond2> ::= ELSE '{' <escopo> '}' _                       <cond2> ::= ELSE '{' <escopo> '}' ^

        '$' r 23
        '}' r 23
        BREAK r 23
        FOR r 23
        IF r 23
        var r 23
        WHILE r 23




